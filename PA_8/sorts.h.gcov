        -:    0:Source:sorts.h
        -:    0:Graph:sorts_tests.gcno
        -:    0:Data:sorts_tests.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <functional>
        -:    3:#include <iostream>
        -:    4:#include <vector>
        -:    5:#include <utility>
        -:    6:
        -:    7:// Pretty printing for vectors of Printable objects (have ostream operator<< defined)
        -:    8:// Be careful: modifications risk failing tests
        -:    9:template <class Printable>
       59:   10:std::ostream& operator<<(std::ostream& os, const std::vector<Printable>& container) {
       59:   11:    os << "[";
       59:   12:    bool first = false;
      813:   13:    for (const Printable& t : container) {
      754:   14:        if (first) {
      696:   15:            os << ", ";
        -:   16:        }
      754:   17:        if (typeid(t) == typeid(std::string)) {
    #####:   18:            os << "\"" << t << "\"";
        -:   19:        } else {
      754:   20:            os << t;
        -:   21:        }
      754:   22:        first = true;
        -:   23:    }
       59:   24:    os << "]";
       59:   25:    return os;
        -:   26:}
        -:   27:
        -:   28:// Selection sort (example of implementation expectations)
        -:   29:template <class Comparable>
        -:   30:void selection_sort(std::vector<Comparable>& container) {
        -:   31:    // print the initial container
        -:   32:    std::cout << container << std::endl;
        -:   33:
        -:   34:    if (container.empty()) {
        -:   35:        return;
        -:   36:    }
        -:   37:
        -:   38:    for (size_t index = 0; index < container.size()-1; index++) {
        -:   39:        // do 1 pass of selection sort: find the min and swap it to the front
        -:   40:        size_t index_min = index;
        -:   41:        for (size_t i = index+1; i < container.size(); i++) {
        -:   42:            if (container[i] < container[index_min]) {
        -:   43:                index_min = i;
        -:   44:            }
        -:   45:        }
        -:   46:        Comparable t = container[index];
        -:   47:        container[index] = container[index_min];
        -:   48:        container[index_min] = t;
        -:   49:
        -:   50:        // print the container after each pass
        -:   51:        std::cout << container << std::endl;
        -:   52:    }
        -:   53:}
        -:   54:
        -:   55:// TODO(student): implement sorts: insertion, shell, heap, merge, quick, bucket, radix
        -:   56:template <class Comparable>
        1:   57:void insertion_sort(std::vector<Comparable>& list){
        1:   58:    size_t counter = 1;
       96:   59:    for (size_t i = 0; i < list.size(); ++i){
       95:   60:        if (counter == i){
       12:   61:            std:: cout << list << std::endl;
       12:   62:            counter++;
        -:   63:        }
       95:   64:        if (i != 0){
       93:   65:            if (list.at(i) < list.at(i - 1)){
       41:   66:                Comparable current = list.at(i);
       41:   67:                list.at(i) = list.at(i - 1);
       41:   68:                list.at(i - 1) = current;
       41:   69:                i -= 2;
        -:   70:            }
        -:   71:        }
        -:   72:    }
        1:   73:    std:: cout << list << std::endl;
        1:   74:}
        -:   75:
        -:   76:template <class Comparable>
        3:   77:void insertion_sort(std::vector<Comparable>& list, int left, int right){
        3:   78:    if (right != -1){
        2:   79:        std:: cout << list << std::endl;
        -:   80:    }
        -:   81:    
        3:   82:    int counter = left + 1;
       53:   83:    for (int i = left; i < right + 1; ++i){
       50:   84:        if (i != 0){
       47:   85:            if (list.at(i) < list.at(i - 1)){
       19:   86:                Comparable current = list.at(i);
       19:   87:                list.at(i) = list.at(i - 1);
       19:   88:                list.at(i - 1) = current;
       19:   89:                i -= 2;
        -:   90:            }
        -:   91:        }
       50:   92:        if (counter == i){
       10:   93:            std:: cout << list << std::endl;
       10:   94:            counter++;
        -:   95:        }
        -:   96:    }
        3:   97:}
        -:   98:
        7:   99:size_t pow(size_t base, size_t power){
        7:  100:    size_t output = 1;
       23:  101:    for (size_t i = 0; i < power; ++i){
       16:  102:        output *= base;
        -:  103:    }
        7:  104:    return output;
        -:  105:}
        -:  106:
        -:  107:template <class Comparable>
        1:  108:void shell_sort(std::vector<Comparable>& list){
        1:  109:    std::cout << list << std::endl;
        2:  110:    std::vector<int> gaps;
        1:  111:    size_t index = 1;
        4:  112:    while(pow(2, index) - 1 < list.size()){
        3:  113:        gaps.push_back(pow(2, index) - 1);
        3:  114:        index++;
        -:  115:    }
        4:  116:    for (int i = gaps.size() - 1; i >=0; i--){
       81:  117:        for (int j = 0; j + gaps.at(i) < (int)list.size(); ++j){
       78:  118:            if (list.at(j) > list.at(j + gaps.at(i))){
       27:  119:                Comparable current = list.at(j + gaps.at(i));
       27:  120:                list.at(j + gaps.at(i)) = list.at(j);
       27:  121:                list.at(j) = current;
       27:  122:                if (j - gaps.at(i) >= 0){
       19:  123:                    j -= gaps.at(i) + 1;
        -:  124:                }
        -:  125:            }
        -:  126:        }
        3:  127:        std::cout << list << std::endl;
        -:  128:    }
        -:  129:    
        1:  130:}
        -:  131:
        -:  132:template <class Comparable>
        1:  133:void heap_sort(std::vector<Comparable>& list){
        1:  134:    list = list;
        1:  135:}
        -:  136:
        -:  137:template <class Comparable>
       24:  138:void merge(std::vector<Comparable>& list, std::vector<Comparable>& output, int left, int right, int end){
       24:  139:    int outCount = left;
       24:  140:    int leftEnd = right - 1;
       24:  141:    int total = end - left + 1;
       85:  142:    while (left <= leftEnd && right <= end){
       61:  143:        if (list.at(left) < list.at(right)){
       44:  144:            output.at(outCount) = list.at(left);
       44:  145:            left++;
       44:  146:            outCount++;
        -:  147:        }
        -:  148:        else{
       17:  149:            output.at(outCount) = list.at(right);
       17:  150:            right++;
       17:  151:            outCount++;
        -:  152:        }
        -:  153:    }
       34:  154:    while (left <= leftEnd){
       10:  155:        output.at(outCount) = list.at(left);
       10:  156:        left++;
       10:  157:        outCount++;
        -:  158:    }
       51:  159:    while (right <= end){
       27:  160:        output.at(outCount) = list.at(right);
       27:  161:        right++;
       27:  162:        outCount++;
        -:  163:    }
      122:  164:    for (int i = 0; i < total; ++i){
       98:  165:        list.at(end) = output.at(end);
       98:  166:        end--;
        -:  167:    }
       24:  168:    std::cout << list << std::endl;
       24:  169:}
        -:  170:
        -:  171:template <class Comparable>
       50:  172:void merge_sort(std::vector<Comparable>& list, std::vector<Comparable>& output, int left, int right){
       50:  173:    if (left < right){
       24:  174:        int middle = (left + right) / 2;
       24:  175:        merge_sort(list, output, left, middle);
       24:  176:        merge_sort(list, output, middle + 1, right);
       24:  177:        merge(list, output, left, middle + 1, right);
        -:  178:    }
       50:  179:}
        -:  180:
        -:  181:template <class Comparable>
        2:  182:void merge_sort(std::vector<Comparable>& list){
        4:  183:    std::vector<Comparable> temp(list.size());
        2:  184:    std::cout << list << std::endl;
        2:  185:    merge_sort(list, temp, 0, list.size() - 1);
        2:  186:}
        -:  187:
        -:  188:template <class Comparable>
        1:  189:const Comparable& findPivot(std::vector<Comparable>& list, int left, int right){
        1:  190:    int median = (left + right) / 2;
        1:  191:    if (list.at(median) < list.at(left) )
        1:  192:        std::swap( list.at(left), list.at(median) );
        1:  193:    if (list.at(right) < list.at(left) )
        1:  194:        std::swap( list.at(left), list.at(right) );
        1:  195:    if (list.at(right) <= list.at(median))
        1:  196:        std::swap( list.at(median), list.at(right) );
        -:  197:
        1:  198:    std::swap(list.at(median), list.at(right));
        1:  199:    return list.at(right);
        -:  200:}
        -:  201:
        -:  202:template <class Comparable>
        4:  203:void quick_sort(std::vector<Comparable>& list, int left, int right){
        4:  204:    std:: cout << list << std::endl;
        4:  205:    if (left + 10 <= right){
        1:  206:        const Comparable& median = findPivot(list, left, right);
        1:  207:        int i = left, j = right - 1;
        -:  208:
        -:  209:        for ( ; ; ){
        5:  210:            while(list.at(i) <= median){++i;};
       11:  211:            while(list.at(j) >= median){j--;};
        2:  212:            if (i < j){
        1:  213:                std::swap(list.at(i), list.at(j));
        -:  214:            }
        -:  215:            else{
        1:  216:                break;
        -:  217:            }
        -:  218:        }
        1:  219:        std::swap(list.at(i), list.at(right));
        -:  220:
        1:  221:        quick_sort(list, left, i - 1);
        1:  222:        quick_sort(list, i + 1, right);
        -:  223:    }
        -:  224:    else{
        3:  225:        insertion_sort(list, left, right);
        -:  226:    }
        4:  227:}
        -:  228:
        -:  229:template <class Comparable>
        2:  230:void quick_sort(std::vector<Comparable>& list){
        2:  231:    quick_sort(list, 0, list.size() - 1);
        2:  232:}
        -:  233:
        1:  234:void bucket_sort(std::vector<unsigned>& list){
        1:  235:    list = list;
        1:  236:}
        -:  237:
        -:  238:template <class Comparable>
        1:  239:void radix_sort(std::vector<Comparable>& list){
        1:  240:    list = list;
        1:  241:}
        -:  242:
        1:  243:void radix_sort(std::vector<std::string>& array){
        1:  244:    array = array;
        1:  245:}   
        -:  246:
        -:  247:
        -:  248:
        -:  249:
        -:  250:
        -:  251:
