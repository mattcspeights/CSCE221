        -:    0:Source:collection.h
        -:    0:Graph:collection_tests.gcno
        -:    0:Data:collection_tests.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:
        -:    3:#include <cstddef>
        -:    4:#include <iostream>
        -:    5:
        -:    6:template <typename Object>
        -:    7:class Collection {
        -:    8:    Object* list;
        -:    9:    size_t list_size;
        -:   10:    size_t capacity;
        -:   11:
        -:   12:    public:
        -:   13:        // default constructor
        2:   14:        Collection(): list{nullptr}, list_size(0), capacity(1){
        2:   15:            list = new Object[1];
        2:   16:        }
        -:   17:
        2:   18:        ~Collection(){
        2:   19:            delete[] list;
        2:   20:            this->list_size = 0;
        2:   21:            this->capacity = 0;
        2:   22:        }
        -:   23:
        -:   24:        //copy constructor
        -:   25:        Collection(const Collection& other): list{nullptr}, list_size(other.list_size), capacity(0) {
        -:   26:            if(other.capacity != 0){
        -:   27:                list = new Object[other.capacity];
        -:   28:
        -:   29:                for(size_t i = 0; i < list_size; ++i){
        -:   30:                    list[i] = other.list[i];
        -:   31:                }
        -:   32:
        -:   33:                this->capacity = other.capacity;
        -:   34:            }
        -:   35:        }
        -:   36:
        -:   37:        // copy assignment operator
        1:   38:        Collection& operator=(const Collection& other){
        1:   39:            if(this == &other){
    #####:   40:                return *this;
        -:   41:            }
        -:   42:
        1:   43:            delete[] list;
        1:   44:            list = nullptr;
        1:   45:            list_size= other.list_size;
        1:   46:            capacity = other.capacity;
        -:   47:
        1:   48:            if(other.capacity != 0){
        -:   49:
      11*:   50:                list = new Object[other.capacity]{};
        -:   51:
        8:   52:                for(size_t i = 0; i < list_size; ++i){
        7:   53:                    list[i] = other.list[i];
        -:   54:                }
        -:   55:            }
        -:   56:
        1:   57:            return *this;
        -:   58:        }
        -:   59:
        1:   60:        size_t size() const{
        1:   61:            return this->list_size;
        -:   62:        }
        -:   63:
       10:   64:        bool is_empty() const{
       10:   65:            if (this->list == nullptr){
    #####:   66:                return true;
        -:   67:            }
        -:   68:
       10:   69:            if (this->list_size == 0){
        2:   70:                return true;
        -:   71:            }
        -:   72:
        8:   73:            return false;
        -:   74:        }
        -:   75:
        -:   76:        void make_empty(){
        -:   77:            if (this->list != nullptr){
        -:   78:                delete[] this->list;
        -:   79:                this->list = nullptr;
        -:   80:
        -:   81:                this->list_size = 0;
        -:   82:            }
        -:   83:            
        -:   84:        }
        -:   85:
        8:   86:        void insert(const Object& obj){
        -:   87:
        8:   88:            if (this->is_empty()){
        1:   89:                this->resize();
        -:   90:            }
        -:   91:
        -:   92:
        8:   93:            if (this->list_size + 1 > capacity){
        1:   94:                this->resize();
        -:   95:            }
        -:   96:
        8:   97:            if (this->list_size != 0){
       35:   98:                for (size_t i = this->list_size; i > 0; --i){
       28:   99:                    Object temp = this->list[i - 1];
       28:  100:                    this->list[i] = temp;
        -:  101:                }
        -:  102:            }
        -:  103:
        8:  104:            this->list[0] = obj;
        8:  105:            this->list_size++;            
        8:  106:        }
        -:  107:
        2:  108:        void resize(){
        -:  109:
        2:  110:            Object* newList = nullptr;
        -:  111:
        2:  112:            if (this->is_empty()){
        1:  113:                newList = new Object[5];
        1:  114:                this->capacity = 5;
        -:  115:            }
        -:  116:            else{
       1*:  117:                newList = new Object[this->capacity * 2];
        1:  118:                this->capacity = 2 * this->capacity;
        -:  119:            }
        -:  120:            
        7:  121:            for (size_t i = 0; i < this->list_size; ++i){
        5:  122:                newList[i] = this->list[i];
        -:  123:            }
        -:  124:
        2:  125:            delete[] this->list;
        -:  126:
        2:  127:            this->list = newList;
        2:  128:        }
        -:  129:
    #####:  130:        Object& returnIndex(size_t index){
    #####:  131:            return this->list[index];
        -:  132:        }
        -:  133:
        8:  134:        void remove(const Object& obj){
       36:  135:            for(size_t i = 0; i < this->list_size; ++i){
       36:  136:                if (this->list[i] == obj){
       8*:  137:                    for(size_t j = i; j < this->list_size - 1; ++j){
    #####:  138:                        this->list[j] = this->list[j + 1];
        -:  139:                    }
        8:  140:                    this->list_size--;
        8:  141:                    break;
        -:  142:                }
        -:  143:            }
        8:  144:        }
        -:  145:
        1:  146:        bool contains(const Object& obj) const{
        8:  147:            for (size_t i = 0; i < this->list_size; ++i){
        8:  148:                if (this->list[i] == obj){
        1:  149:                    return true;
        -:  150:                }
        -:  151:            }
        -:  152:
    #####:  153:            return false;
        -:  154:        }
        -:  155:
        -:  156:
        -:  157:};
