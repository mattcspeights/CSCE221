        -:    0:Source:selection.cpp
        -:    0:Graph:selection_tests.gcno
        -:    0:Data:selection_tests.gcda
        -:    0:Runs:1
        -:    1:#include <stdexcept>
        -:    2:#include <iostream>
        -:    3:#include "selection.h"
        -:    4:
        -:    5:const int __INT32_MIN__ = -__INT32_MAX__ - 1;
        -:    6:
        -:    7:// slow but easy to make sorting alogirthm lol
        2:    8:int* sortList(int* list, size_t N){
       2*:    9:    int* newList = new int[N];
        2:   10:    int highestNum = __INT32_MIN__;
        2:   11:    size_t highestIndex = 0;
       14:   12:    for(size_t i = 0; i < N; ++i){
       12:   13:        highestNum = __INT32_MIN__;
       12:   14:        highestIndex = 0;
       84:   15:        for(size_t j = 0; j < N; ++j){
       72:   16:            if (list[j] > highestNum){
       26:   17:                highestNum = list[j];
       26:   18:                highestIndex = j;
        -:   19:            }
        -:   20:        }
       12:   21:        newList[i] = highestNum;
       12:   22:        list[highestIndex] = __INT32_MIN__;
        -:   23:    }
        -:   24:
        2:   25:    delete[] list;
        -:   26:    
        2:   27:    return newList;
        -:   28:}
        -:   29:
        1:   30:int select(size_t k, const int* list, size_t N) {
        1:   31:    if(k > N){
    #####:   32:        throw std::invalid_argument("k exceeds the number of entries in the array");
        -:   33:    }
        -:   34:
       1*:   35:    int* copyList = new int[N];
        -:   36:
        7:   37:    for(size_t i = 0; i < N; ++i){
        6:   38:        copyList[i] = list[i];
        -:   39:    }
        -:   40:
        1:   41:    copyList = sortList(copyList, N);
        -:   42:
        1:   43:    int selectedNum = copyList[k-1];
        -:   44:
        1:   45:    delete[] copyList;
        -:   46:
        1:   47:    return selectedNum;
        -:   48:}
