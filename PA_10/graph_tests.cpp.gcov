        -:    0:Source:graph_tests.cpp
        -:    0:Graph:graph_tests.gcno
        -:    0:Data:graph_tests.gcda
        -:    0:Runs:1
        -:    1:#include "graph.h"
        -:    2:
        1:    3:int main() {
        2:    4:    Graph test1;
        -:    5:
        1:    6:    test1.add_vertex(3);
        1:    7:    if (!test1.add_vertex(3)){
        1:    8:        std::cout << "proper behavior for duplicate insert" << std::endl;
        -:    9:    }
        -:   10:
        1:   11:    test1.add_vertex(5);
        1:   12:    test1.add_edge(3, 5);
        1:   13:    if (!test1.add_edge(3, 10000)){
        1:   14:        std::cout << "proper behavior for no destination vertex" << std::endl;
        -:   15:    }
        -:   16:
        -:   17:    //example copied from prompt
        1:   18:    std::cout << "make an empty digraph" << std::endl;
        2:   19:    Graph G;
        -:   20:
        1:   21:    std::cout << "add vertices" << std::endl;
        8:   22:    for (size_t n = 1; n <= 7; n++) {
        7:   23:        G.add_vertex(n);
        -:   24:    }
        -:   25:
        1:   26:    std::cout << "add directed edges" << std::endl;
        1:   27:    G.add_edge(1,2,5);  // 1 ->{5} 2; (edge from 1 to 2 with weight 5)
        1:   28:    G.add_edge(1,3,3);
        1:   29:    G.add_edge(2,3,2);
        1:   30:    G.add_edge(2,5,3);
        1:   31:    G.add_edge(2,7,1);
        1:   32:    G.add_edge(3,4,7);
        1:   33:    G.add_edge(3,5,7);
        1:   34:    G.add_edge(4,1,2);
        1:   35:    G.add_edge(4,6,6);
        1:   36:    G.add_edge(5,4,2);
        1:   37:    G.add_edge(5,6,1);
        1:   38:    G.add_edge(7,5,1);
        -:   39:
        1:   40:    std::cout << "G has " << G.vertex_count() << " vertices" << std::endl;
        1:   41:    std::cout << "G has " << G.edge_count() << " edges" << std::endl;
        -:   42:
        1:   43:    G.remove_vertex(3);
        1:   44:    G.remove_vertex(100000);
        1:   45:    if (G.contains_edge(7,5)){
        1:   46:        std::cout << "Edge from 7 to 5 is " << G.cost(7, 5) << std::endl;
        -:   47:    }
        -:   48:
        1:   49:    std::cout << "G has " << G.vertex_count() << " vertices" << std::endl;
        1:   50:    std::cout << "G has " << G.edge_count() << " edges" << std::endl;
        1:   51:    std::cout << "Edge from 7 to 4 is " << G.cost(7, 4) << std::endl; 
        -:   52:
        1:   53:    std::cout << "G has " << G.vertex_count() << " vertices and ";
        1:   54:    std::cout << G.edge_count() << " edges" << std::endl;
        -:   55:
        1:   56:    std::cout << "compute a minimum spanning tree" <<std::endl;
        2:   57:    std::list<std::pair<size_t,size_t>> mst = G.prim();
        -:   58:
        1:   59:    std::cout << "print minimum spanning tree" <<std::endl;
        1:   60:    double tree_cost = 0;
        6:   61:    for (const std::pair<size_t,size_t>& edge : mst) {
        5:   62:        std::cout << edge.first << " --{"<<G.cost(edge.first,edge.second)<<"} " << edge.second << ";" << std::endl;
        5:   63:        tree_cost += G.cost(edge.first,edge.second);
        -:   64:    }
        1:   65:    std::cout << "tree cost = " << tree_cost <<std::endl;
        -:   66:
        1:   67:    G.print_minimum_spanning_tree();
        -:   68:
        1:   69:    std::cout << "Testing with one vertex" << std::endl;
        2:   70:    Graph G2;
        1:   71:    G2.add_vertex(5);
        -:   72:
        1:   73:    std::list<std::pair<size_t,size_t>> mst2 = G2.prim();
        -:   74:
        1:   75:    G2.print_minimum_spanning_tree();
        -:   76:
        1:   77:    return 0;
        -:   78:}
