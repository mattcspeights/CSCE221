        -:    0:Source:graph.h
        -:    0:Graph:graph_tests.gcno
        -:    0:Data:graph_tests.gcda
        -:    0:Runs:1
        -:    1:#pragma once
        -:    2:#include <cassert>
        -:    3:#include <cmath>
        -:    4:#include <cstddef>
        -:    5:#include <iostream>
        -:    6:#include <vector>
        -:    7:#include <sstream>
        -:    8:#include <queue>
        -:    9:#include <list>
        -:   10:#include <unordered_map>
        -:   11:#include <unordered_set>
        -:   12:
        -:   13:
        -:   14:struct edge{
        -:   15:    size_t vertexFrom;
        -:   16:    size_t vertexTo;
        -:   17:    double weight;
        -:   18:
        -:   19:    public:
        -:   20:        edge(): vertexFrom(), vertexTo(), weight(){}
       26:   21:        edge(size_t vertexFrom, size_t vertexTo, double weight): vertexFrom(vertexFrom), vertexTo(vertexTo), weight(weight){}
      193:   22:        edge(const edge& other): vertexFrom(other.vertexFrom), vertexTo(other.vertexTo), weight(other.weight){}
       44:   23:        edge& operator=(const edge& other){
       44:   24:            vertexFrom = other.vertexFrom;
       44:   25:            vertexTo = other.vertexTo;
       44:   26:            weight = other.weight;
       44:   27:            return *this;
        -:   28:        }
        -:   29:
        -:   30:        bool operator==(const edge& other){
        -:   31:            if (this->vertexTo == other.vertexTo){
        -:   32:                return true;
        -:   33:            }
        -:   34:            return false;
        -:   35:        }
        -:   36:};
        -:   37:
        -:   38:
        -:   39:struct vertex{
        -:   40:    size_t value;
        -:   41:    double distance;
        -:   42:    bool known;
        -:   43:    std::vector<edge> edges;
        -:   44:
        -:   45:    public:
        -:   46:        vertex(): value(), distance(INFINITY), known(false), edges(){}
       10:   47:        vertex(size_t value): value(value), distance(INFINITY), known(false), edges(){}
      60*:   48:        vertex(const vertex& other): value(other.value), distance(other.distance), known(other.known),
       60:   49:         edges(other.edges){}
        -:   50:        vertex& operator=(const vertex& other){
        -:   51:            if (this != &other){
        -:   52:                value = other.value;
        -:   53:                distance = other.distance;
        -:   54:                known = other.known;
        -:   55:                edges = other.edges;
        -:   56:            }
        -:   57:            return *this;
        -:   58:        }
        -:   59:
        -:   60:        bool operator==(const vertex& other){
        -:   61:            if (this->value == other.value){
        -:   62:                return true;
        -:   63:            }
        -:   64:            return false;
        -:   65:        }
        -:   66:
        -:   67:};
        -:   68:
        -:   69:struct hashVertex{
        -:   70:    template <class Hash=std::hash<size_t>>
        -:   71:    std::size_t operator() (const vertex& vert) const {
        -:   72:        size_t hash = std::hash<size_t>()(vert.value);
        -:   73:        return hash;
        -:   74:    }
        -:   75:};
        -:   76:
        -:   77:std::vector<edge> merge_lists(std::vector<edge>& left, std::vector<edge>& right);
        -:   78:
        5:   79:std::vector<edge> merge_lists(std::vector<edge>& left, std::vector<edge>& right){
        5:   80:    size_t i = 0, j = 0, h = 0;
        5:   81:    std::vector<edge> output;
       25:   82:    while (i < left.size() && j < right.size()){
       20:   83:        if (left.at(i).weight < right.at(j).weight){
        9:   84:            output.insert(output.begin() + h, left.at(i));
        9:   85:            ++i;
        9:   86:            ++h;
        -:   87:        }
        -:   88:        else{
       11:   89:            output.insert(output.begin() + h, right.at(j));
       11:   90:            ++j;
       11:   91:            ++h;
        -:   92:        }
        -:   93:    }
        9:   94:    while (i < left.size()){
        4:   95:        output.insert(output.begin() + h, left.at(i));
        4:   96:        ++i;
        4:   97:        ++h;
        -:   98:    }
        8:   99:    while (j < right.size()){
        3:  100:        output.insert(output.begin() + h, right.at(j));
        3:  101:        ++j;
        3:  102:        ++h;
        -:  103:    }
        -:  104:
        5:  105:    return output;
        -:  106:}
        -:  107:
        -:  108:class Graph {
        -:  109:    // TODO(student): Task 1: implement Graph to represent a digraph
        -:  110:    std::unordered_map<size_t, vertex> adjaceny_list;
        -:  111:    size_t numVertex;
        -:  112:    size_t numEdges;
        -:  113:    std::list<std::pair<size_t,size_t>> mst;
        -:  114:
        -:  115:    public:
        -:  116:        // constructors
        6:  117:        Graph(): adjaceny_list(0), numVertex(0), numEdges(0), mst() {}
        -:  118:        Graph(const Graph& other): adjaceny_list(other.adjaceny_list), numVertex(other.numVertex),
        -:  119:         numEdges(other.numEdges), mst(other.mst){}
        -:  120:        Graph& operator=(const Graph& other){
        -:  121:            if (this != & other){
        -:  122:                this->adjaceny_list = other.adjaceny_list;
        -:  123:                numVertex = other.numVertex;
        -:  124:                numEdges = other.numEdges;
        -:  125:                mst = other.mst;
        -:  126:            }
        -:  127:            return *this;
        -:  128:        }
        -:  129:
        -:  130:        // accessors
        3:  131:        size_t vertex_count() const { return numVertex;}
        3:  132:        size_t edge_count() const { return numEdges;}
        -:  133:
       68:  134:        bool contains_vertex(size_t id) const {
        -:  135:            try{
       68:  136:                this->adjaceny_list.at(id);
       12:  137:            }catch(const std::out_of_range& e){
       12:  138:                return false;
        -:  139:            }
       56:  140:            return true;
        -:  141:        }
        -:  142:
       27:  143:        bool contains_edge(size_t src, size_t dest) const {
       27:  144:            if (this->contains_vertex(src)){
       27:  145:                std::vector<edge> edgeList = adjaceny_list.at(src).edges;
        -:  146:
       57:  147:                for (edge& value : edgeList){
       42:  148:                    if (value.vertexTo == dest){
       12:  149:                        return true;
        -:  150:                    }
        -:  151:                }
        -:  152:            }
       15:  153:            return false;
        -:  154:        }
        -:  155:
       12:  156:        double cost(size_t src, size_t dest) const {
       12:  157:            if (this->contains_edge(src, dest)){
       22:  158:                std::vector<edge> edgeList = adjaceny_list.at(src).edges;
        -:  159:
       18:  160:                for (edge& value : edgeList){
       18:  161:                    if (value.vertexTo == dest){
       11:  162:                        return value.weight;
        -:  163:                    }
        -:  164:                }
        -:  165:
    #####:  166:                return INFINITY;
        -:  167:            }
        -:  168:            else {
        1:  169:                return INFINITY;
        -:  170:            }
        -:  171:        }
        -:  172:
        -:  173:        // modifiers
       11:  174:        bool add_vertex(size_t id){
       11:  175:            if (this->contains_vertex(id)){
        1:  176:                return false;
        -:  177:            }
       10:  178:            vertex newVertex(id);
       10:  179:            this->adjaceny_list.insert({id, newVertex});
       10:  180:            numVertex++;
       10:  181:            return true;
        -:  182:        }
        -:  183:
       14:  184:        bool add_edge(size_t src, size_t dest, double weight=1){
       14:  185:            if (this->contains_edge(src, dest)){
    #####:  186:                return false;
        -:  187:            }
       14:  188:            if (!this->contains_vertex(src) || !this->contains_vertex(dest)){
        1:  189:                return false;
        -:  190:            }
       13:  191:            edge newEdge(src, dest, weight);
       13:  192:            edge reverseEdge(dest, src, weight);
       13:  193:            bool addedEdge = false;
       13:  194:            std::vector<edge>& edgeList = this->adjaceny_list.at(src).edges;
       13:  195:            std::vector<edge>& otherEdgeList = this->adjaceny_list.at(dest).edges;
       13:  196:            if (edgeList.size() == 0){
        2:  197:                edgeList.push_back(newEdge);
        2:  198:                addedEdge = true;
        -:  199:            }
        -:  200:            else{
       19:  201:                for (size_t i = 0; i < edgeList.size(); ++i){
       16:  202:                    if (newEdge.weight < edgeList.at(i).weight){
        8:  203:                        edgeList.insert(edgeList.begin() + i, newEdge);
        8:  204:                        addedEdge = true;
        8:  205:                        break;
        -:  206:                    }
        -:  207:                }
        -:  208:            }
       13:  209:            if (otherEdgeList.size() == 0){
        7:  210:                otherEdgeList.push_back(reverseEdge);
        -:  211:            }
        -:  212:            else{
        9:  213:                for (size_t i = 0; i < otherEdgeList.size(); ++i){
        8:  214:                    if (reverseEdge.weight < otherEdgeList.at(i).weight){
        5:  215:                        otherEdgeList.insert(otherEdgeList.begin() + i, reverseEdge);
        5:  216:                        break;
        -:  217:                    }
        -:  218:                }
        -:  219:            }
       13:  220:            if (!addedEdge){
        3:  221:                edgeList.push_back(newEdge);
        -:  222:            }
       13:  223:            numEdges++;
       13:  224:            return true;
        -:  225:        }
        -:  226:
        2:  227:        bool remove_vertex(size_t id){
        2:  228:            if (!this->contains_vertex(id)){
        1:  229:                return false;
        -:  230:            }
        1:  231:            std::cout << this->adjaceny_list.at(id).edges.size() << std::endl;
        1:  232:            numEdges -= this->adjaceny_list.at(id).edges.size();
        1:  233:            this->adjaceny_list.erase(id);
        1:  234:            numVertex--;
        7:  235:            for (auto& keyVal : adjaceny_list){
       25:  236:                for(auto it = keyVal.second.edges.begin(); it != keyVal.second.edges.end();){
       19:  237:                    if(it->vertexTo == id){
        3:  238:                        it = keyVal.second.edges.erase(it);
        3:  239:                        numEdges--;
        -:  240:                    }
        -:  241:                    else
       16:  242:                        ++it;
        -:  243:                }
        -:  244:            }
        1:  245:            return true;
        -:  246:        }
        -:  247:
        -:  248:        bool remove_edge(size_t src, size_t dest){
        -:  249:            if (!this->contains_edge(src, dest)){
        -:  250:                return false;
        -:  251:            }
        -:  252:            bool foundEdge = false;
        -:  253:            std::vector<edge> edgeList = adjaceny_list.at(src).edges;
        -:  254:            for(auto it = edgeList.begin(); it != edgeList.end();){
        -:  255:                if(it->vertexTo == dest){
        -:  256:                    it = edgeList.erase(it);
        -:  257:                    numEdges--;
        -:  258:                }
        -:  259:                else
        -:  260:                    ++it;
        -:  261:            }
        -:  262:            edgeList = adjaceny_list.at(dest).edges;
        -:  263:            for(auto it = edgeList.begin(); it != edgeList.end();){
        -:  264:                if(it->vertexTo == src){
        -:  265:                    it = edgeList.erase(it);
        -:  266:                    numEdges--;
        -:  267:                }
        -:  268:                else
        -:  269:                    ++it;
        -:  270:            }
        -:  271:            return foundEdge;
        -:  272:        }
        -:  273:
        -:  274:    void printGraph(){
        -:  275:        for (auto& [key, value] : this->adjaceny_list){
        -:  276:            std::cout << value.value << std::endl;
        -:  277:        }
        -:  278:    }
        -:  279:
        2:  280:    std::list<std::pair<size_t,size_t>> prim(){
        2:  281:        std::list<std::pair<size_t,size_t>> mst;
        2:  282:        if (this->adjaceny_list.empty()){
    #####:  283:            this->mst = mst;
    #####:  284:            return mst;
        -:  285:        }
        2:  286:        bool done = false;
        2:  287:        if (this->numVertex == 0){
    #####:  288:            done = true;
        -:  289:        }
        2:  290:        size_t source_id = adjaceny_list.begin()->first;
        2:  291:        this->adjaceny_list.at(source_id).known = true;
        2:  292:        this->adjaceny_list.at(source_id).distance = 0;
        4:  293:        std::vector<edge> currentEdges = this->adjaceny_list.at(source_id).edges;
        7:  294:        while (!done){
        -:  295:            // traverse to closest vertex
        6:  296:            if (currentEdges.size() == 0){
        1:  297:                this->mst = mst;
        1:  298:                return mst;
        -:  299:            }
        5:  300:            edge& closestEdge = currentEdges.at(0);
       30:  301:            for(auto it = currentEdges.begin(); it != currentEdges.end();){
      25*:  302:                if (adjaceny_list.at(it->vertexTo).known){
       12:  303:                    currentEdges.erase(it);
        -:  304:                }
       13:  305:                else if (it->weight < closestEdge.weight){
    #####:  306:                    closestEdge = *it;
        -:  307:                }else{
       13:  308:                    it++;
        -:  309:                }
        -:  310:            }
        5:  311:            vertex& currentVertex = this->adjaceny_list.at(closestEdge.vertexTo);
        5:  312:            currentVertex.known = true;
        5:  313:            mst.push_back({closestEdge.vertexFrom, closestEdge.vertexTo});
        5:  314:            currentVertex.distance = closestEdge.weight;
       19:  315:            for (edge& ed : currentVertex.edges){
       14:  316:                vertex& temp = adjaceny_list.at(ed.vertexTo);
      14*:  317:                if (temp.known){
        8:  318:                    if (currentVertex.distance + ed.weight < temp.distance){
    #####:  319:                        temp.distance = currentVertex.distance + ed.weight;
    #####:  320:                        mst.push_back({closestEdge.vertexFrom, closestEdge.vertexTo});
        -:  321:                    }
        -:  322:                }
        -:  323:            }
        -:  324:            // add new edges into current edges
        5:  325:            currentEdges = merge_lists(currentEdges, currentVertex.edges);
        5:  326:            done = true;
       21:  327:            for (auto& [key, vert] : adjaceny_list){
      20*:  328:                if (!vert.known){
        4:  329:                    done = false;
        4:  330:                    break;
        -:  331:                }
        -:  332:            }
        5:  333:            if (currentEdges.size() == 0){
    #####:  334:                done = true;
        -:  335:            }
        -:  336:        }
        1:  337:        this->mst = mst;
        1:  338:        return mst;
        -:  339:    }
        -:  340:
        -:  341:    double distance(size_t id) const {
        -:  342:        if (contains_vertex(id)){
        -:  343:            return this->adjaceny_list.at(id).distance;
        -:  344:        }
        -:  345:        else{
        -:  346:            return INFINITY;
        -:  347:        }
        -:  348:    }
        -:  349:
        2:  350:    void print_minimum_spanning_tree(std::ostream& os=std::cout) const {
        7:  351:        for (auto& pair : this->mst){
        5:  352:            os << pair.first << " --{" << this->adjaceny_list.at(pair.second).distance << "} " << pair.second << std::endl;
        -:  353:        }
        2:  354:    }
        -:  355:};
        -:  356:
